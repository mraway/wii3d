//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml.Serialization;
using W3C.Soap;
using compression = System.IO.Compression;
using constructor = Microsoft.Dss.Services.Constructor;
using contractmanager = Microsoft.Dss.Services.ContractManager;
using contractmodel = Microsoft.Dss.Services.ContractModel;
using io = System.IO;
using reflection = System.Reflection;
using wiimotelib = WiimoteLib.Proxy;


namespace WiimoteLib.Proxy
{
    
    
    /// <summary>
    /// Wiimote Contract
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public sealed class Contract
    {
        
        /// The Unique Contract Identifier for the Wiimote service
        public const String Identifier = "http://schemas.tempuri.org/2007/06/wiimote.html";
        
        /// The Dss Service dssModel Contract(s)
        public static List<contractmodel.ServiceSummary> ServiceModel()
        {
            contractmanager.ServiceSummaryLoader loader = new contractmanager.ServiceSummaryLoader();
            return loader.GetServiceSummaries(typeof(Contract).Assembly);

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <param name="partners">Optional list of service partners for new service instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort, params PartnerType[] partners)
        {
            DsspResponsePort<CreateResponse> result = new DsspResponsePort<CreateResponse>();
            ServiceInfoType si = new ServiceInfoType(Contract.Identifier, null);
            if (partners != null)
            {
                si.PartnerList = new List<PartnerType>(partners);
            }
            Microsoft.Dss.Services.Constructor.Create create =
                new Microsoft.Dss.Services.Constructor.Create(si, result);
            contructorServicePort.Post(create);
            return result;

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort)
        {
            return Contract.CreateService(contructorServicePort, null);
        }
    }
    
    /// <summary>
    /// Wiimote State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("WiimoteState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public class WiimoteState : ICloneable, IDssSerializable
    {
        
        private AccelCalibrationInfo _accelCalibrationInfo;
        
        private ButtonState _buttonState;
        
        private AccelState _accelState;
        
        private IRState _iRState;
        
        private Byte _battery;
        
        private Boolean _rumble;
        
        private Boolean _extension;
        
        private ExtensionType _extensionType;
        
        private NunchukState _nunchukState;
        
        private ClassicControllerState _classicControllerState;
        
        private LEDState _lEDState;
        
        /// <summary>
        /// Accel Calibration Info
        /// </summary>
        [DataMember()]
        public AccelCalibrationInfo AccelCalibrationInfo
        {
            get
            {
                return this._accelCalibrationInfo;
            }
            set
            {
                this._accelCalibrationInfo = value;
            }
        }
        
        /// <summary>
        /// Button State
        /// </summary>
        [DataMember()]
        public ButtonState ButtonState
        {
            get
            {
                return this._buttonState;
            }
            set
            {
                this._buttonState = value;
            }
        }
        
        /// <summary>
        /// Accel State
        /// </summary>
        [DataMember()]
        public AccelState AccelState
        {
            get
            {
                return this._accelState;
            }
            set
            {
                this._accelState = value;
            }
        }
        
        /// <summary>
        /// IR State
        /// </summary>
        [DataMember()]
        public IRState IRState
        {
            get
            {
                return this._iRState;
            }
            set
            {
                this._iRState = value;
            }
        }
        
        /// <summary>
        /// Battery
        /// </summary>
        [DataMember()]
        public Byte Battery
        {
            get
            {
                return this._battery;
            }
            set
            {
                this._battery = value;
            }
        }
        
        /// <summary>
        /// Rumble
        /// </summary>
        [DataMember()]
        public Boolean Rumble
        {
            get
            {
                return this._rumble;
            }
            set
            {
                this._rumble = value;
            }
        }
        
        /// <summary>
        /// Extension
        /// </summary>
        [DataMember()]
        public Boolean Extension
        {
            get
            {
                return this._extension;
            }
            set
            {
                this._extension = value;
            }
        }
        
        /// <summary>
        /// Extension Type
        /// </summary>
        [DataMember()]
        public ExtensionType ExtensionType
        {
            get
            {
                return this._extensionType;
            }
            set
            {
                this._extensionType = value;
            }
        }
        
        /// <summary>
        /// Nunchuk State
        /// </summary>
        [DataMember()]
        public NunchukState NunchukState
        {
            get
            {
                return this._nunchukState;
            }
            set
            {
                this._nunchukState = value;
            }
        }
        
        /// <summary>
        /// Classic Controller State
        /// </summary>
        [DataMember()]
        public ClassicControllerState ClassicControllerState
        {
            get
            {
                return this._classicControllerState;
            }
            set
            {
                this._classicControllerState = value;
            }
        }
        
        /// <summary>
        /// LED State
        /// </summary>
        [DataMember()]
        public LEDState LEDState
        {
            get
            {
                return this._lEDState;
            }
            set
            {
                this._lEDState = value;
            }
        }
        
        /// <summary>
        /// Copy To Wiimote State
        /// </summary>
        public virtual void CopyTo(IDssSerializable target)
        {
            WiimoteState typedTarget = target as WiimoteState;

            if (typedTarget == null)
                throw new ArgumentException("CopyTo({0}) requires type {0}", this.GetType().FullName);
            typedTarget.AccelCalibrationInfo = this.AccelCalibrationInfo;
            typedTarget.ButtonState = this.ButtonState;
            typedTarget.AccelState = this.AccelState;
            typedTarget.IRState = this.IRState;
            typedTarget.Battery = this.Battery;
            typedTarget.Rumble = this.Rumble;
            typedTarget.Extension = this.Extension;
            typedTarget.ExtensionType = this.ExtensionType;
            typedTarget.NunchukState = this.NunchukState;
            typedTarget.ClassicControllerState = this.ClassicControllerState;
            typedTarget.LEDState = this.LEDState;
        }
        
        /// <summary>
        /// Clone Wiimote State
        /// </summary>
        public virtual object Clone()
        {
            WiimoteState target = new WiimoteState();

            target.AccelCalibrationInfo = this.AccelCalibrationInfo;
            target.ButtonState = this.ButtonState;
            target.AccelState = this.AccelState;
            target.IRState = this.IRState;
            target.Battery = this.Battery;
            target.Rumble = this.Rumble;
            target.Extension = this.Extension;
            target.ExtensionType = this.ExtensionType;
            target.NunchukState = this.NunchukState;
            target.ClassicControllerState = this.ClassicControllerState;
            target.LEDState = this.LEDState;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public virtual void Serialize(System.IO.BinaryWriter writer)
        {
            ((Microsoft.Dss.Core.IDssSerializable)AccelCalibrationInfo).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)ButtonState).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)AccelState).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)IRState).Serialize(writer);

            writer.Write(Battery);

            writer.Write(Rumble);

            writer.Write(Extension);

            writer.Write((System.Byte)ExtensionType);

            ((Microsoft.Dss.Core.IDssSerializable)NunchukState).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)ClassicControllerState).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)LEDState).Serialize(writer);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public virtual object Deserialize(System.IO.BinaryReader reader)
        {
            AccelCalibrationInfo = (AccelCalibrationInfo)((Microsoft.Dss.Core.IDssSerializable)new AccelCalibrationInfo()).Deserialize(reader);

            ButtonState = (ButtonState)((Microsoft.Dss.Core.IDssSerializable)new ButtonState()).Deserialize(reader);

            AccelState = (AccelState)((Microsoft.Dss.Core.IDssSerializable)new AccelState()).Deserialize(reader);

            IRState = (IRState)((Microsoft.Dss.Core.IDssSerializable)new IRState()).Deserialize(reader);

            Battery = reader.ReadByte();

            Rumble = reader.ReadBoolean();

            Extension = reader.ReadBoolean();

            ExtensionType = (ExtensionType)reader.ReadByte();

            NunchukState = (NunchukState)((Microsoft.Dss.Core.IDssSerializable)new NunchukState()).Deserialize(reader);

            ClassicControllerState = (ClassicControllerState)((Microsoft.Dss.Core.IDssSerializable)new ClassicControllerState()).Deserialize(reader);

            LEDState = (LEDState)((Microsoft.Dss.Core.IDssSerializable)new LEDState()).Deserialize(reader);

            return this;

        }
    }
    
    /// <summary>
    /// LED State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("LEDState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct LEDState : ICloneable, IDssSerializable
    {
        
        private Boolean _lED1;
        
        private Boolean _lED2;
        
        private Boolean _lED3;
        
        private Boolean _lED4;
        
        /// <summary>
        /// LED1
        /// </summary>
        [DataMember()]
        public Boolean LED1
        {
            get
            {
                return this._lED1;
            }
            set
            {
                this._lED1 = value;
            }
        }
        
        /// <summary>
        /// LED2
        /// </summary>
        [DataMember()]
        public Boolean LED2
        {
            get
            {
                return this._lED2;
            }
            set
            {
                this._lED2 = value;
            }
        }
        
        /// <summary>
        /// LED3
        /// </summary>
        [DataMember()]
        public Boolean LED3
        {
            get
            {
                return this._lED3;
            }
            set
            {
                this._lED3 = value;
            }
        }
        
        /// <summary>
        /// LED4
        /// </summary>
        [DataMember()]
        public Boolean LED4
        {
            get
            {
                return this._lED4;
            }
            set
            {
                this._lED4 = value;
            }
        }
        
        /// <summary>
        /// Copy To LED State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone LED State
        /// </summary>
        public object Clone()
        {
            LEDState target = new LEDState();

            target.LED1 = this.LED1;
            target.LED2 = this.LED2;
            target.LED3 = this.LED3;
            target.LED4 = this.LED4;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(LED1);

            writer.Write(LED2);

            writer.Write(LED3);

            writer.Write(LED4);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            LED1 = reader.ReadBoolean();

            LED2 = reader.ReadBoolean();

            LED3 = reader.ReadBoolean();

            LED4 = reader.ReadBoolean();

            return this;

        }
    }
    
    /// <summary>
    /// Rumble Request
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("RumbleRequest", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct RumbleRequest : ICloneable, IDssSerializable
    {
        
        private Boolean _rumble;
        
        /// <summary>
        /// Rumble
        /// </summary>
        [DataMember()]
        public Boolean Rumble
        {
            get
            {
                return this._rumble;
            }
            set
            {
                this._rumble = value;
            }
        }
        
        /// <summary>
        /// Copy To Rumble Request
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Rumble Request
        /// </summary>
        public object Clone()
        {
            RumbleRequest target = new RumbleRequest();

            target.Rumble = this.Rumble;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(Rumble);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            Rumble = reader.ReadBoolean();

            return this;

        }
    }
    
    /// <summary>
    /// Extension Type
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("ExtensionType", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public enum ExtensionType
    {
        
        /// <summary>
        /// None
        /// </summary>
        None = 0,
        
        /// <summary>
        /// Nunchuk
        /// </summary>
        Nunchuk = 254,
        
        /// <summary>
        /// Classic Controller
        /// </summary>
        ClassicController = 253,
    }
    
    /// <summary>
    /// Accel Calibration Info
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("AccelCalibrationInfo", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct AccelCalibrationInfo : ICloneable, IDssSerializable
    {
        
        private Byte _x0;
        
        private Byte _y0;
        
        private Byte _z0;
        
        private Byte _xG;
        
        private Byte _yG;
        
        private Byte _zG;
        
        /// <summary>
        /// X0
        /// </summary>
        [DataMember()]
        public Byte X0
        {
            get
            {
                return this._x0;
            }
            set
            {
                this._x0 = value;
            }
        }
        
        /// <summary>
        /// Y0
        /// </summary>
        [DataMember()]
        public Byte Y0
        {
            get
            {
                return this._y0;
            }
            set
            {
                this._y0 = value;
            }
        }
        
        /// <summary>
        /// Z0
        /// </summary>
        [DataMember()]
        public Byte Z0
        {
            get
            {
                return this._z0;
            }
            set
            {
                this._z0 = value;
            }
        }
        
        /// <summary>
        /// XG
        /// </summary>
        [DataMember()]
        public Byte XG
        {
            get
            {
                return this._xG;
            }
            set
            {
                this._xG = value;
            }
        }
        
        /// <summary>
        /// YG
        /// </summary>
        [DataMember()]
        public Byte YG
        {
            get
            {
                return this._yG;
            }
            set
            {
                this._yG = value;
            }
        }
        
        /// <summary>
        /// ZG
        /// </summary>
        [DataMember()]
        public Byte ZG
        {
            get
            {
                return this._zG;
            }
            set
            {
                this._zG = value;
            }
        }
        
        /// <summary>
        /// Copy To Accel Calibration Info
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Accel Calibration Info
        /// </summary>
        public object Clone()
        {
            AccelCalibrationInfo target = new AccelCalibrationInfo();

            target.X0 = this.X0;
            target.Y0 = this.Y0;
            target.Z0 = this.Z0;
            target.XG = this.XG;
            target.YG = this.YG;
            target.ZG = this.ZG;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(X0);

            writer.Write(Y0);

            writer.Write(Z0);

            writer.Write(XG);

            writer.Write(YG);

            writer.Write(ZG);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            X0 = reader.ReadByte();

            Y0 = reader.ReadByte();

            Z0 = reader.ReadByte();

            XG = reader.ReadByte();

            YG = reader.ReadByte();

            ZG = reader.ReadByte();

            return this;

        }
    }
    
    /// <summary>
    /// Button State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("ButtonState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct ButtonState : ICloneable, IDssSerializable
    {
        
        private Boolean _a;
        
        private Boolean _b;
        
        private Boolean _plus;
        
        private Boolean _home;
        
        private Boolean _minus;
        
        private Boolean _one;
        
        private Boolean _two;
        
        private Boolean _up;
        
        private Boolean _down;
        
        private Boolean _left;
        
        private Boolean _right;
        
        /// <summary>
        /// A
        /// </summary>
        [DataMember()]
        public Boolean A
        {
            get
            {
                return this._a;
            }
            set
            {
                this._a = value;
            }
        }
        
        /// <summary>
        /// B
        /// </summary>
        [DataMember()]
        public Boolean B
        {
            get
            {
                return this._b;
            }
            set
            {
                this._b = value;
            }
        }
        
        /// <summary>
        /// Plus
        /// </summary>
        [DataMember()]
        public Boolean Plus
        {
            get
            {
                return this._plus;
            }
            set
            {
                this._plus = value;
            }
        }
        
        /// <summary>
        /// Home
        /// </summary>
        [DataMember()]
        public Boolean Home
        {
            get
            {
                return this._home;
            }
            set
            {
                this._home = value;
            }
        }
        
        /// <summary>
        /// Minus
        /// </summary>
        [DataMember()]
        public Boolean Minus
        {
            get
            {
                return this._minus;
            }
            set
            {
                this._minus = value;
            }
        }
        
        /// <summary>
        /// One
        /// </summary>
        [DataMember()]
        public Boolean One
        {
            get
            {
                return this._one;
            }
            set
            {
                this._one = value;
            }
        }
        
        /// <summary>
        /// Two
        /// </summary>
        [DataMember()]
        public Boolean Two
        {
            get
            {
                return this._two;
            }
            set
            {
                this._two = value;
            }
        }
        
        /// <summary>
        /// Up
        /// </summary>
        [DataMember()]
        public Boolean Up
        {
            get
            {
                return this._up;
            }
            set
            {
                this._up = value;
            }
        }
        
        /// <summary>
        /// Down
        /// </summary>
        [DataMember()]
        public Boolean Down
        {
            get
            {
                return this._down;
            }
            set
            {
                this._down = value;
            }
        }
        
        /// <summary>
        /// Left
        /// </summary>
        [DataMember()]
        public Boolean Left
        {
            get
            {
                return this._left;
            }
            set
            {
                this._left = value;
            }
        }
        
        /// <summary>
        /// Right
        /// </summary>
        [DataMember()]
        public Boolean Right
        {
            get
            {
                return this._right;
            }
            set
            {
                this._right = value;
            }
        }
        
        /// <summary>
        /// Copy To Button State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Button State
        /// </summary>
        public object Clone()
        {
            ButtonState target = new ButtonState();

            target.A = this.A;
            target.B = this.B;
            target.Plus = this.Plus;
            target.Home = this.Home;
            target.Minus = this.Minus;
            target.One = this.One;
            target.Two = this.Two;
            target.Up = this.Up;
            target.Down = this.Down;
            target.Left = this.Left;
            target.Right = this.Right;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(A);

            writer.Write(B);

            writer.Write(Plus);

            writer.Write(Home);

            writer.Write(Minus);

            writer.Write(One);

            writer.Write(Two);

            writer.Write(Up);

            writer.Write(Down);

            writer.Write(Left);

            writer.Write(Right);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            A = reader.ReadBoolean();

            B = reader.ReadBoolean();

            Plus = reader.ReadBoolean();

            Home = reader.ReadBoolean();

            Minus = reader.ReadBoolean();

            One = reader.ReadBoolean();

            Two = reader.ReadBoolean();

            Up = reader.ReadBoolean();

            Down = reader.ReadBoolean();

            Left = reader.ReadBoolean();

            Right = reader.ReadBoolean();

            return this;

        }
    }
    
    /// <summary>
    /// Accel State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("AccelState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct AccelState : ICloneable, IDssSerializable
    {
        
        private Byte _rawX;
        
        private Byte _rawY;
        
        private Byte _rawZ;
        
        private Single _x;
        
        private Single _y;
        
        private Single _z;
        
        /// <summary>
        /// RawX
        /// </summary>
        [DataMember()]
        public Byte RawX
        {
            get
            {
                return this._rawX;
            }
            set
            {
                this._rawX = value;
            }
        }
        
        /// <summary>
        /// RawY
        /// </summary>
        [DataMember()]
        public Byte RawY
        {
            get
            {
                return this._rawY;
            }
            set
            {
                this._rawY = value;
            }
        }
        
        /// <summary>
        /// RawZ
        /// </summary>
        [DataMember()]
        public Byte RawZ
        {
            get
            {
                return this._rawZ;
            }
            set
            {
                this._rawZ = value;
            }
        }
        
        /// <summary>
        /// X
        /// </summary>
        [DataMember()]
        public Single X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }
        
        /// <summary>
        /// Y
        /// </summary>
        [DataMember()]
        public Single Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }
        
        /// <summary>
        /// Z
        /// </summary>
        [DataMember()]
        public Single Z
        {
            get
            {
                return this._z;
            }
            set
            {
                this._z = value;
            }
        }
        
        /// <summary>
        /// Copy To Accel State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Accel State
        /// </summary>
        public object Clone()
        {
            AccelState target = new AccelState();

            target.RawX = this.RawX;
            target.RawY = this.RawY;
            target.RawZ = this.RawZ;
            target.X = this.X;
            target.Y = this.Y;
            target.Z = this.Z;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(RawX);

            writer.Write(RawY);

            writer.Write(RawZ);

            writer.Write(X);

            writer.Write(Y);

            writer.Write(Z);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            RawX = reader.ReadByte();

            RawY = reader.ReadByte();

            RawZ = reader.ReadByte();

            X = reader.ReadSingle();

            Y = reader.ReadSingle();

            Z = reader.ReadSingle();

            return this;

        }
    }
    
    /// <summary>
    /// IR State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("IRState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct IRState : ICloneable, IDssSerializable
    {
        
        private IRMode _mode;
        
        private Int32 _rawX1;
        
        private Int32 _rawX2;
        
        private Int32 _rawX3;
        
        private Int32 _rawX4;
        
        private Int32 _rawY1;
        
        private Int32 _rawY2;
        
        private Int32 _rawY3;
        
        private Int32 _rawY4;
        
        private Int32 _size1;
        
        private Int32 _size2;
        
        private Int32 _size3;
        
        private Int32 _size4;
        
        private Boolean _found1;
        
        private Boolean _found2;
        
        private Boolean _found3;
        
        private Boolean _found4;
        
        private Single _x1;
        
        private Single _x2;
        
        private Single _x3;
        
        private Single _x4;
        
        private Single _y1;
        
        private Single _y2;
        
        private Single _y3;
        
        private Single _y4;
        
        private Int32 _rawMidX;
        
        private Int32 _rawMidY;
        
        private Single _midX;
        
        private Single _midY;
        
        /// <summary>
        /// Mode
        /// </summary>
        [DataMember()]
        public IRMode Mode
        {
            get
            {
                return this._mode;
            }
            set
            {
                this._mode = value;
            }
        }
        
        /// <summary>
        /// RawX1
        /// </summary>
        [DataMember()]
        public Int32 RawX1
        {
            get
            {
                return this._rawX1;
            }
            set
            {
                this._rawX1 = value;
            }
        }
        
        /// <summary>
        /// RawX2
        /// </summary>
        [DataMember()]
        public Int32 RawX2
        {
            get
            {
                return this._rawX2;
            }
            set
            {
                this._rawX2 = value;
            }
        }
        
        /// <summary>
        /// RawX3
        /// </summary>
        [DataMember()]
        public Int32 RawX3
        {
            get
            {
                return this._rawX3;
            }
            set
            {
                this._rawX3 = value;
            }
        }
        
        /// <summary>
        /// RawX4
        /// </summary>
        [DataMember()]
        public Int32 RawX4
        {
            get
            {
                return this._rawX4;
            }
            set
            {
                this._rawX4 = value;
            }
        }
        
        /// <summary>
        /// RawY1
        /// </summary>
        [DataMember()]
        public Int32 RawY1
        {
            get
            {
                return this._rawY1;
            }
            set
            {
                this._rawY1 = value;
            }
        }
        
        /// <summary>
        /// RawY2
        /// </summary>
        [DataMember()]
        public Int32 RawY2
        {
            get
            {
                return this._rawY2;
            }
            set
            {
                this._rawY2 = value;
            }
        }
        
        /// <summary>
        /// RawY3
        /// </summary>
        [DataMember()]
        public Int32 RawY3
        {
            get
            {
                return this._rawY3;
            }
            set
            {
                this._rawY3 = value;
            }
        }
        
        /// <summary>
        /// RawY4
        /// </summary>
        [DataMember()]
        public Int32 RawY4
        {
            get
            {
                return this._rawY4;
            }
            set
            {
                this._rawY4 = value;
            }
        }
        
        /// <summary>
        /// Size1
        /// </summary>
        [DataMember()]
        public Int32 Size1
        {
            get
            {
                return this._size1;
            }
            set
            {
                this._size1 = value;
            }
        }
        
        /// <summary>
        /// Size2
        /// </summary>
        [DataMember()]
        public Int32 Size2
        {
            get
            {
                return this._size2;
            }
            set
            {
                this._size2 = value;
            }
        }
        
        /// <summary>
        /// Size3
        /// </summary>
        [DataMember()]
        public Int32 Size3
        {
            get
            {
                return this._size3;
            }
            set
            {
                this._size3 = value;
            }
        }
        
        /// <summary>
        /// Size4
        /// </summary>
        [DataMember()]
        public Int32 Size4
        {
            get
            {
                return this._size4;
            }
            set
            {
                this._size4 = value;
            }
        }
        
        /// <summary>
        /// Found1
        /// </summary>
        [DataMember()]
        public Boolean Found1
        {
            get
            {
                return this._found1;
            }
            set
            {
                this._found1 = value;
            }
        }
        
        /// <summary>
        /// Found2
        /// </summary>
        [DataMember()]
        public Boolean Found2
        {
            get
            {
                return this._found2;
            }
            set
            {
                this._found2 = value;
            }
        }
        
        /// <summary>
        /// Found3
        /// </summary>
        [DataMember()]
        public Boolean Found3
        {
            get
            {
                return this._found3;
            }
            set
            {
                this._found3 = value;
            }
        }
        
        /// <summary>
        /// Found4
        /// </summary>
        [DataMember()]
        public Boolean Found4
        {
            get
            {
                return this._found4;
            }
            set
            {
                this._found4 = value;
            }
        }
        
        /// <summary>
        /// X1
        /// </summary>
        [DataMember()]
        public Single X1
        {
            get
            {
                return this._x1;
            }
            set
            {
                this._x1 = value;
            }
        }
        
        /// <summary>
        /// X2
        /// </summary>
        [DataMember()]
        public Single X2
        {
            get
            {
                return this._x2;
            }
            set
            {
                this._x2 = value;
            }
        }
        
        /// <summary>
        /// X3
        /// </summary>
        [DataMember()]
        public Single X3
        {
            get
            {
                return this._x3;
            }
            set
            {
                this._x3 = value;
            }
        }
        
        /// <summary>
        /// X4
        /// </summary>
        [DataMember()]
        public Single X4
        {
            get
            {
                return this._x4;
            }
            set
            {
                this._x4 = value;
            }
        }
        
        /// <summary>
        /// Y1
        /// </summary>
        [DataMember()]
        public Single Y1
        {
            get
            {
                return this._y1;
            }
            set
            {
                this._y1 = value;
            }
        }
        
        /// <summary>
        /// Y2
        /// </summary>
        [DataMember()]
        public Single Y2
        {
            get
            {
                return this._y2;
            }
            set
            {
                this._y2 = value;
            }
        }
        
        /// <summary>
        /// Y3
        /// </summary>
        [DataMember()]
        public Single Y3
        {
            get
            {
                return this._y3;
            }
            set
            {
                this._y3 = value;
            }
        }
        
        /// <summary>
        /// Y4
        /// </summary>
        [DataMember()]
        public Single Y4
        {
            get
            {
                return this._y4;
            }
            set
            {
                this._y4 = value;
            }
        }
        
        /// <summary>
        /// Raw MidX
        /// </summary>
        [DataMember()]
        public Int32 RawMidX
        {
            get
            {
                return this._rawMidX;
            }
            set
            {
                this._rawMidX = value;
            }
        }
        
        /// <summary>
        /// Raw MidY
        /// </summary>
        [DataMember()]
        public Int32 RawMidY
        {
            get
            {
                return this._rawMidY;
            }
            set
            {
                this._rawMidY = value;
            }
        }
        
        /// <summary>
        /// MidX
        /// </summary>
        [DataMember()]
        public Single MidX
        {
            get
            {
                return this._midX;
            }
            set
            {
                this._midX = value;
            }
        }
        
        /// <summary>
        /// MidY
        /// </summary>
        [DataMember()]
        public Single MidY
        {
            get
            {
                return this._midY;
            }
            set
            {
                this._midY = value;
            }
        }
        
        /// <summary>
        /// Copy To IR State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone IR State
        /// </summary>
        public object Clone()
        {
            IRState target = new IRState();

            target.Mode = this.Mode;
            target.RawX1 = this.RawX1;
            target.RawX2 = this.RawX2;
            target.RawX3 = this.RawX3;
            target.RawX4 = this.RawX4;
            target.RawY1 = this.RawY1;
            target.RawY2 = this.RawY2;
            target.RawY3 = this.RawY3;
            target.RawY4 = this.RawY4;
            target.Size1 = this.Size1;
            target.Size2 = this.Size2;
            target.Size3 = this.Size3;
            target.Size4 = this.Size4;
            target.Found1 = this.Found1;
            target.Found2 = this.Found2;
            target.Found3 = this.Found3;
            target.Found4 = this.Found4;
            target.X1 = this.X1;
            target.X2 = this.X2;
            target.X3 = this.X3;
            target.X4 = this.X4;
            target.Y1 = this.Y1;
            target.Y2 = this.Y2;
            target.Y3 = this.Y3;
            target.Y4 = this.Y4;
            target.RawMidX = this.RawMidX;
            target.RawMidY = this.RawMidY;
            target.MidX = this.MidX;
            target.MidY = this.MidY;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write((System.Byte)Mode);

            writer.Write(RawX1);

            writer.Write(RawX2);

            writer.Write(RawX3);

            writer.Write(RawX4);

            writer.Write(RawY1);

            writer.Write(RawY2);

            writer.Write(RawY3);

            writer.Write(RawY4);

            writer.Write(Size1);

            writer.Write(Size2);

            writer.Write(Size3);

            writer.Write(Size4);

            writer.Write(Found1);

            writer.Write(Found2);

            writer.Write(Found3);

            writer.Write(Found4);

            writer.Write(X1);

            writer.Write(X2);

            writer.Write(X3);

            writer.Write(X4);

            writer.Write(Y1);

            writer.Write(Y2);

            writer.Write(Y3);

            writer.Write(Y4);

            writer.Write(RawMidX);

            writer.Write(RawMidY);

            writer.Write(MidX);

            writer.Write(MidY);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            Mode = (IRMode)reader.ReadByte();

            RawX1 = reader.ReadInt32();

            RawX2 = reader.ReadInt32();

            RawX3 = reader.ReadInt32();

            RawX4 = reader.ReadInt32();

            RawY1 = reader.ReadInt32();

            RawY2 = reader.ReadInt32();

            RawY3 = reader.ReadInt32();

            RawY4 = reader.ReadInt32();

            Size1 = reader.ReadInt32();

            Size2 = reader.ReadInt32();

            Size3 = reader.ReadInt32();

            Size4 = reader.ReadInt32();

            Found1 = reader.ReadBoolean();

            Found2 = reader.ReadBoolean();

            Found3 = reader.ReadBoolean();

            Found4 = reader.ReadBoolean();

            X1 = reader.ReadSingle();

            X2 = reader.ReadSingle();

            X3 = reader.ReadSingle();

            X4 = reader.ReadSingle();

            Y1 = reader.ReadSingle();

            Y2 = reader.ReadSingle();

            Y3 = reader.ReadSingle();

            Y4 = reader.ReadSingle();

            RawMidX = reader.ReadInt32();

            RawMidY = reader.ReadInt32();

            MidX = reader.ReadSingle();

            MidY = reader.ReadSingle();

            return this;

        }
    }
    
    /// <summary>
    /// IR Mode
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("IRMode", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public enum IRMode
    {
        
        /// <summary>
        /// Off
        /// </summary>
        Off = 0,
        
        /// <summary>
        /// Basic
        /// </summary>
        Basic = 1,
        
        /// <summary>
        /// Extended
        /// </summary>
        Extended = 3,
        
        /// <summary>
        /// Full
        /// </summary>
        Full = 5,
    }
    
    /// <summary>
    /// Nunchuk State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("NunchukState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct NunchukState : ICloneable, IDssSerializable
    {
        
        private NunchukCalibrationInfo _calibrationInfo;
        
        private AccelState _accelState;
        
        private Byte _rawX;
        
        private Byte _rawY;
        
        private Single _x;
        
        private Single _y;
        
        private Boolean _c;
        
        private Boolean _z;
        
        /// <summary>
        /// Calibration Info
        /// </summary>
        [DataMember()]
        public NunchukCalibrationInfo CalibrationInfo
        {
            get
            {
                return this._calibrationInfo;
            }
            set
            {
                this._calibrationInfo = value;
            }
        }
        
        /// <summary>
        /// Accel State
        /// </summary>
        [DataMember()]
        public AccelState AccelState
        {
            get
            {
                return this._accelState;
            }
            set
            {
                this._accelState = value;
            }
        }
        
        /// <summary>
        /// RawX
        /// </summary>
        [DataMember()]
        public Byte RawX
        {
            get
            {
                return this._rawX;
            }
            set
            {
                this._rawX = value;
            }
        }
        
        /// <summary>
        /// RawY
        /// </summary>
        [DataMember()]
        public Byte RawY
        {
            get
            {
                return this._rawY;
            }
            set
            {
                this._rawY = value;
            }
        }
        
        /// <summary>
        /// X
        /// </summary>
        [DataMember()]
        public Single X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }
        
        /// <summary>
        /// Y
        /// </summary>
        [DataMember()]
        public Single Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }
        
        /// <summary>
        /// C
        /// </summary>
        [DataMember()]
        public Boolean C
        {
            get
            {
                return this._c;
            }
            set
            {
                this._c = value;
            }
        }
        
        /// <summary>
        /// Z
        /// </summary>
        [DataMember()]
        public Boolean Z
        {
            get
            {
                return this._z;
            }
            set
            {
                this._z = value;
            }
        }
        
        /// <summary>
        /// Copy To Nunchuk State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Nunchuk State
        /// </summary>
        public object Clone()
        {
            NunchukState target = new NunchukState();

            target.CalibrationInfo = this.CalibrationInfo;
            target.AccelState = this.AccelState;
            target.RawX = this.RawX;
            target.RawY = this.RawY;
            target.X = this.X;
            target.Y = this.Y;
            target.C = this.C;
            target.Z = this.Z;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            ((Microsoft.Dss.Core.IDssSerializable)CalibrationInfo).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)AccelState).Serialize(writer);

            writer.Write(RawX);

            writer.Write(RawY);

            writer.Write(X);

            writer.Write(Y);

            writer.Write(C);

            writer.Write(Z);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            CalibrationInfo = (NunchukCalibrationInfo)((Microsoft.Dss.Core.IDssSerializable)new NunchukCalibrationInfo()).Deserialize(reader);

            AccelState = (AccelState)((Microsoft.Dss.Core.IDssSerializable)new AccelState()).Deserialize(reader);

            RawX = reader.ReadByte();

            RawY = reader.ReadByte();

            X = reader.ReadSingle();

            Y = reader.ReadSingle();

            C = reader.ReadBoolean();

            Z = reader.ReadBoolean();

            return this;

        }
    }
    
    /// <summary>
    /// Nunchuk Calibration Info
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("NunchukCalibrationInfo", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct NunchukCalibrationInfo : ICloneable, IDssSerializable
    {
        
        private Byte _minX;
        
        private Byte _midX;
        
        private Byte _maxX;
        
        private Byte _minY;
        
        private Byte _midY;
        
        private Byte _maxY;
        
        /// <summary>
        /// MinX
        /// </summary>
        [DataMember()]
        public Byte MinX
        {
            get
            {
                return this._minX;
            }
            set
            {
                this._minX = value;
            }
        }
        
        /// <summary>
        /// MidX
        /// </summary>
        [DataMember()]
        public Byte MidX
        {
            get
            {
                return this._midX;
            }
            set
            {
                this._midX = value;
            }
        }
        
        /// <summary>
        /// MaxX
        /// </summary>
        [DataMember()]
        public Byte MaxX
        {
            get
            {
                return this._maxX;
            }
            set
            {
                this._maxX = value;
            }
        }
        
        /// <summary>
        /// MinY
        /// </summary>
        [DataMember()]
        public Byte MinY
        {
            get
            {
                return this._minY;
            }
            set
            {
                this._minY = value;
            }
        }
        
        /// <summary>
        /// MidY
        /// </summary>
        [DataMember()]
        public Byte MidY
        {
            get
            {
                return this._midY;
            }
            set
            {
                this._midY = value;
            }
        }
        
        /// <summary>
        /// MaxY
        /// </summary>
        [DataMember()]
        public Byte MaxY
        {
            get
            {
                return this._maxY;
            }
            set
            {
                this._maxY = value;
            }
        }
        
        /// <summary>
        /// Copy To Nunchuk Calibration Info
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Nunchuk Calibration Info
        /// </summary>
        public object Clone()
        {
            NunchukCalibrationInfo target = new NunchukCalibrationInfo();

            target.MinX = this.MinX;
            target.MidX = this.MidX;
            target.MaxX = this.MaxX;
            target.MinY = this.MinY;
            target.MidY = this.MidY;
            target.MaxY = this.MaxY;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(MinX);

            writer.Write(MidX);

            writer.Write(MaxX);

            writer.Write(MinY);

            writer.Write(MidY);

            writer.Write(MaxY);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            MinX = reader.ReadByte();

            MidX = reader.ReadByte();

            MaxX = reader.ReadByte();

            MinY = reader.ReadByte();

            MidY = reader.ReadByte();

            MaxY = reader.ReadByte();

            return this;

        }
    }
    
    /// <summary>
    /// Classic Controller State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("ClassicControllerState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct ClassicControllerState : ICloneable, IDssSerializable
    {
        
        private ClassicControllerCalibrationInfo _calibrationInfo;
        
        private ClassicControllerButtonState _buttonState;
        
        private Byte _rawXL;
        
        private Byte _rawYL;
        
        private Byte _rawXR;
        
        private Byte _rawYR;
        
        private Single _xL;
        
        private Single _yL;
        
        private Single _xR;
        
        private Single _yR;
        
        private Byte _rawTriggerL;
        
        private Byte _rawTriggerR;
        
        private Single _triggerL;
        
        private Single _triggerR;
        
        /// <summary>
        /// Calibration Info
        /// </summary>
        [DataMember()]
        public ClassicControllerCalibrationInfo CalibrationInfo
        {
            get
            {
                return this._calibrationInfo;
            }
            set
            {
                this._calibrationInfo = value;
            }
        }
        
        /// <summary>
        /// Button State
        /// </summary>
        [DataMember()]
        public ClassicControllerButtonState ButtonState
        {
            get
            {
                return this._buttonState;
            }
            set
            {
                this._buttonState = value;
            }
        }
        
        /// <summary>
        /// RawXL
        /// </summary>
        [DataMember()]
        public Byte RawXL
        {
            get
            {
                return this._rawXL;
            }
            set
            {
                this._rawXL = value;
            }
        }
        
        /// <summary>
        /// RawYL
        /// </summary>
        [DataMember()]
        public Byte RawYL
        {
            get
            {
                return this._rawYL;
            }
            set
            {
                this._rawYL = value;
            }
        }
        
        /// <summary>
        /// RawXR
        /// </summary>
        [DataMember()]
        public Byte RawXR
        {
            get
            {
                return this._rawXR;
            }
            set
            {
                this._rawXR = value;
            }
        }
        
        /// <summary>
        /// RawYR
        /// </summary>
        [DataMember()]
        public Byte RawYR
        {
            get
            {
                return this._rawYR;
            }
            set
            {
                this._rawYR = value;
            }
        }
        
        /// <summary>
        /// XL
        /// </summary>
        [DataMember()]
        public Single XL
        {
            get
            {
                return this._xL;
            }
            set
            {
                this._xL = value;
            }
        }
        
        /// <summary>
        /// YL
        /// </summary>
        [DataMember()]
        public Single YL
        {
            get
            {
                return this._yL;
            }
            set
            {
                this._yL = value;
            }
        }
        
        /// <summary>
        /// XR
        /// </summary>
        [DataMember()]
        public Single XR
        {
            get
            {
                return this._xR;
            }
            set
            {
                this._xR = value;
            }
        }
        
        /// <summary>
        /// YR
        /// </summary>
        [DataMember()]
        public Single YR
        {
            get
            {
                return this._yR;
            }
            set
            {
                this._yR = value;
            }
        }
        
        /// <summary>
        /// Raw TriggerL
        /// </summary>
        [DataMember()]
        public Byte RawTriggerL
        {
            get
            {
                return this._rawTriggerL;
            }
            set
            {
                this._rawTriggerL = value;
            }
        }
        
        /// <summary>
        /// Raw TriggerR
        /// </summary>
        [DataMember()]
        public Byte RawTriggerR
        {
            get
            {
                return this._rawTriggerR;
            }
            set
            {
                this._rawTriggerR = value;
            }
        }
        
        /// <summary>
        /// TriggerL
        /// </summary>
        [DataMember()]
        public Single TriggerL
        {
            get
            {
                return this._triggerL;
            }
            set
            {
                this._triggerL = value;
            }
        }
        
        /// <summary>
        /// TriggerR
        /// </summary>
        [DataMember()]
        public Single TriggerR
        {
            get
            {
                return this._triggerR;
            }
            set
            {
                this._triggerR = value;
            }
        }
        
        /// <summary>
        /// Copy To Classic Controller State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Classic Controller State
        /// </summary>
        public object Clone()
        {
            ClassicControllerState target = new ClassicControllerState();

            target.CalibrationInfo = this.CalibrationInfo;
            target.ButtonState = this.ButtonState;
            target.RawXL = this.RawXL;
            target.RawYL = this.RawYL;
            target.RawXR = this.RawXR;
            target.RawYR = this.RawYR;
            target.XL = this.XL;
            target.YL = this.YL;
            target.XR = this.XR;
            target.YR = this.YR;
            target.RawTriggerL = this.RawTriggerL;
            target.RawTriggerR = this.RawTriggerR;
            target.TriggerL = this.TriggerL;
            target.TriggerR = this.TriggerR;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            ((Microsoft.Dss.Core.IDssSerializable)CalibrationInfo).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)ButtonState).Serialize(writer);

            writer.Write(RawXL);

            writer.Write(RawYL);

            writer.Write(RawXR);

            writer.Write(RawYR);

            writer.Write(XL);

            writer.Write(YL);

            writer.Write(XR);

            writer.Write(YR);

            writer.Write(RawTriggerL);

            writer.Write(RawTriggerR);

            writer.Write(TriggerL);

            writer.Write(TriggerR);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            CalibrationInfo = (ClassicControllerCalibrationInfo)((Microsoft.Dss.Core.IDssSerializable)new ClassicControllerCalibrationInfo()).Deserialize(reader);

            ButtonState = (ClassicControllerButtonState)((Microsoft.Dss.Core.IDssSerializable)new ClassicControllerButtonState()).Deserialize(reader);

            RawXL = reader.ReadByte();

            RawYL = reader.ReadByte();

            RawXR = reader.ReadByte();

            RawYR = reader.ReadByte();

            XL = reader.ReadSingle();

            YL = reader.ReadSingle();

            XR = reader.ReadSingle();

            YR = reader.ReadSingle();

            RawTriggerL = reader.ReadByte();

            RawTriggerR = reader.ReadByte();

            TriggerL = reader.ReadSingle();

            TriggerR = reader.ReadSingle();

            return this;

        }
    }
    
    /// <summary>
    /// Classic Controller Calibration Info
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("ClassicControllerCalibrationInfo", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct ClassicControllerCalibrationInfo : ICloneable, IDssSerializable
    {
        
        private Byte _minXL;
        
        private Byte _midXL;
        
        private Byte _maxXL;
        
        private Byte _minYL;
        
        private Byte _midYL;
        
        private Byte _maxYL;
        
        private Byte _minXR;
        
        private Byte _midXR;
        
        private Byte _maxXR;
        
        private Byte _minYR;
        
        private Byte _midYR;
        
        private Byte _maxYR;
        
        private Byte _minTriggerL;
        
        private Byte _maxTriggerL;
        
        private Byte _minTriggerR;
        
        private Byte _maxTriggerR;
        
        /// <summary>
        /// MinXL
        /// </summary>
        [DataMember()]
        public Byte MinXL
        {
            get
            {
                return this._minXL;
            }
            set
            {
                this._minXL = value;
            }
        }
        
        /// <summary>
        /// MidXL
        /// </summary>
        [DataMember()]
        public Byte MidXL
        {
            get
            {
                return this._midXL;
            }
            set
            {
                this._midXL = value;
            }
        }
        
        /// <summary>
        /// MaxXL
        /// </summary>
        [DataMember()]
        public Byte MaxXL
        {
            get
            {
                return this._maxXL;
            }
            set
            {
                this._maxXL = value;
            }
        }
        
        /// <summary>
        /// MinYL
        /// </summary>
        [DataMember()]
        public Byte MinYL
        {
            get
            {
                return this._minYL;
            }
            set
            {
                this._minYL = value;
            }
        }
        
        /// <summary>
        /// MidYL
        /// </summary>
        [DataMember()]
        public Byte MidYL
        {
            get
            {
                return this._midYL;
            }
            set
            {
                this._midYL = value;
            }
        }
        
        /// <summary>
        /// MaxYL
        /// </summary>
        [DataMember()]
        public Byte MaxYL
        {
            get
            {
                return this._maxYL;
            }
            set
            {
                this._maxYL = value;
            }
        }
        
        /// <summary>
        /// MinXR
        /// </summary>
        [DataMember()]
        public Byte MinXR
        {
            get
            {
                return this._minXR;
            }
            set
            {
                this._minXR = value;
            }
        }
        
        /// <summary>
        /// MidXR
        /// </summary>
        [DataMember()]
        public Byte MidXR
        {
            get
            {
                return this._midXR;
            }
            set
            {
                this._midXR = value;
            }
        }
        
        /// <summary>
        /// MaxXR
        /// </summary>
        [DataMember()]
        public Byte MaxXR
        {
            get
            {
                return this._maxXR;
            }
            set
            {
                this._maxXR = value;
            }
        }
        
        /// <summary>
        /// MinYR
        /// </summary>
        [DataMember()]
        public Byte MinYR
        {
            get
            {
                return this._minYR;
            }
            set
            {
                this._minYR = value;
            }
        }
        
        /// <summary>
        /// MidYR
        /// </summary>
        [DataMember()]
        public Byte MidYR
        {
            get
            {
                return this._midYR;
            }
            set
            {
                this._midYR = value;
            }
        }
        
        /// <summary>
        /// MaxYR
        /// </summary>
        [DataMember()]
        public Byte MaxYR
        {
            get
            {
                return this._maxYR;
            }
            set
            {
                this._maxYR = value;
            }
        }
        
        /// <summary>
        /// Min TriggerL
        /// </summary>
        [DataMember()]
        public Byte MinTriggerL
        {
            get
            {
                return this._minTriggerL;
            }
            set
            {
                this._minTriggerL = value;
            }
        }
        
        /// <summary>
        /// Max TriggerL
        /// </summary>
        [DataMember()]
        public Byte MaxTriggerL
        {
            get
            {
                return this._maxTriggerL;
            }
            set
            {
                this._maxTriggerL = value;
            }
        }
        
        /// <summary>
        /// Min TriggerR
        /// </summary>
        [DataMember()]
        public Byte MinTriggerR
        {
            get
            {
                return this._minTriggerR;
            }
            set
            {
                this._minTriggerR = value;
            }
        }
        
        /// <summary>
        /// Max TriggerR
        /// </summary>
        [DataMember()]
        public Byte MaxTriggerR
        {
            get
            {
                return this._maxTriggerR;
            }
            set
            {
                this._maxTriggerR = value;
            }
        }
        
        /// <summary>
        /// Copy To Classic Controller Calibration Info
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Classic Controller Calibration Info
        /// </summary>
        public object Clone()
        {
            ClassicControllerCalibrationInfo target = new ClassicControllerCalibrationInfo();

            target.MinXL = this.MinXL;
            target.MidXL = this.MidXL;
            target.MaxXL = this.MaxXL;
            target.MinYL = this.MinYL;
            target.MidYL = this.MidYL;
            target.MaxYL = this.MaxYL;
            target.MinXR = this.MinXR;
            target.MidXR = this.MidXR;
            target.MaxXR = this.MaxXR;
            target.MinYR = this.MinYR;
            target.MidYR = this.MidYR;
            target.MaxYR = this.MaxYR;
            target.MinTriggerL = this.MinTriggerL;
            target.MaxTriggerL = this.MaxTriggerL;
            target.MinTriggerR = this.MinTriggerR;
            target.MaxTriggerR = this.MaxTriggerR;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(MinXL);

            writer.Write(MidXL);

            writer.Write(MaxXL);

            writer.Write(MinYL);

            writer.Write(MidYL);

            writer.Write(MaxYL);

            writer.Write(MinXR);

            writer.Write(MidXR);

            writer.Write(MaxXR);

            writer.Write(MinYR);

            writer.Write(MidYR);

            writer.Write(MaxYR);

            writer.Write(MinTriggerL);

            writer.Write(MaxTriggerL);

            writer.Write(MinTriggerR);

            writer.Write(MaxTriggerR);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            MinXL = reader.ReadByte();

            MidXL = reader.ReadByte();

            MaxXL = reader.ReadByte();

            MinYL = reader.ReadByte();

            MidYL = reader.ReadByte();

            MaxYL = reader.ReadByte();

            MinXR = reader.ReadByte();

            MidXR = reader.ReadByte();

            MaxXR = reader.ReadByte();

            MinYR = reader.ReadByte();

            MidYR = reader.ReadByte();

            MaxYR = reader.ReadByte();

            MinTriggerL = reader.ReadByte();

            MaxTriggerL = reader.ReadByte();

            MinTriggerR = reader.ReadByte();

            MaxTriggerR = reader.ReadByte();

            return this;

        }
    }
    
    /// <summary>
    /// Classic Controller Button State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("ClassicControllerButtonState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct ClassicControllerButtonState : ICloneable, IDssSerializable
    {
        
        private Boolean _a;
        
        private Boolean _b;
        
        private Boolean _plus;
        
        private Boolean _home;
        
        private Boolean _minus;
        
        private Boolean _up;
        
        private Boolean _down;
        
        private Boolean _left;
        
        private Boolean _right;
        
        private Boolean _x;
        
        private Boolean _y;
        
        private Boolean _zL;
        
        private Boolean _zR;
        
        private Boolean _triggerL;
        
        private Boolean _triggerR;
        
        /// <summary>
        /// A
        /// </summary>
        [DataMember()]
        public Boolean A
        {
            get
            {
                return this._a;
            }
            set
            {
                this._a = value;
            }
        }
        
        /// <summary>
        /// B
        /// </summary>
        [DataMember()]
        public Boolean B
        {
            get
            {
                return this._b;
            }
            set
            {
                this._b = value;
            }
        }
        
        /// <summary>
        /// Plus
        /// </summary>
        [DataMember()]
        public Boolean Plus
        {
            get
            {
                return this._plus;
            }
            set
            {
                this._plus = value;
            }
        }
        
        /// <summary>
        /// Home
        /// </summary>
        [DataMember()]
        public Boolean Home
        {
            get
            {
                return this._home;
            }
            set
            {
                this._home = value;
            }
        }
        
        /// <summary>
        /// Minus
        /// </summary>
        [DataMember()]
        public Boolean Minus
        {
            get
            {
                return this._minus;
            }
            set
            {
                this._minus = value;
            }
        }
        
        /// <summary>
        /// Up
        /// </summary>
        [DataMember()]
        public Boolean Up
        {
            get
            {
                return this._up;
            }
            set
            {
                this._up = value;
            }
        }
        
        /// <summary>
        /// Down
        /// </summary>
        [DataMember()]
        public Boolean Down
        {
            get
            {
                return this._down;
            }
            set
            {
                this._down = value;
            }
        }
        
        /// <summary>
        /// Left
        /// </summary>
        [DataMember()]
        public Boolean Left
        {
            get
            {
                return this._left;
            }
            set
            {
                this._left = value;
            }
        }
        
        /// <summary>
        /// Right
        /// </summary>
        [DataMember()]
        public Boolean Right
        {
            get
            {
                return this._right;
            }
            set
            {
                this._right = value;
            }
        }
        
        /// <summary>
        /// X
        /// </summary>
        [DataMember()]
        public Boolean X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }
        
        /// <summary>
        /// Y
        /// </summary>
        [DataMember()]
        public Boolean Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }
        
        /// <summary>
        /// ZL
        /// </summary>
        [DataMember()]
        public Boolean ZL
        {
            get
            {
                return this._zL;
            }
            set
            {
                this._zL = value;
            }
        }
        
        /// <summary>
        /// ZR
        /// </summary>
        [DataMember()]
        public Boolean ZR
        {
            get
            {
                return this._zR;
            }
            set
            {
                this._zR = value;
            }
        }
        
        /// <summary>
        /// TriggerL
        /// </summary>
        [DataMember()]
        public Boolean TriggerL
        {
            get
            {
                return this._triggerL;
            }
            set
            {
                this._triggerL = value;
            }
        }
        
        /// <summary>
        /// TriggerR
        /// </summary>
        [DataMember()]
        public Boolean TriggerR
        {
            get
            {
                return this._triggerR;
            }
            set
            {
                this._triggerR = value;
            }
        }
        
        /// <summary>
        /// Copy To Classic Controller Button State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Classic Controller Button State
        /// </summary>
        public object Clone()
        {
            ClassicControllerButtonState target = new ClassicControllerButtonState();

            target.A = this.A;
            target.B = this.B;
            target.Plus = this.Plus;
            target.Home = this.Home;
            target.Minus = this.Minus;
            target.Up = this.Up;
            target.Down = this.Down;
            target.Left = this.Left;
            target.Right = this.Right;
            target.X = this.X;
            target.Y = this.Y;
            target.ZL = this.ZL;
            target.ZR = this.ZR;
            target.TriggerL = this.TriggerL;
            target.TriggerR = this.TriggerR;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(A);

            writer.Write(B);

            writer.Write(Plus);

            writer.Write(Home);

            writer.Write(Minus);

            writer.Write(Up);

            writer.Write(Down);

            writer.Write(Left);

            writer.Write(Right);

            writer.Write(X);

            writer.Write(Y);

            writer.Write(ZL);

            writer.Write(ZR);

            writer.Write(TriggerL);

            writer.Write(TriggerR);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            A = reader.ReadBoolean();

            B = reader.ReadBoolean();

            Plus = reader.ReadBoolean();

            Home = reader.ReadBoolean();

            Minus = reader.ReadBoolean();

            Up = reader.ReadBoolean();

            Down = reader.ReadBoolean();

            Left = reader.ReadBoolean();

            Right = reader.ReadBoolean();

            X = reader.ReadBoolean();

            Y = reader.ReadBoolean();

            ZL = reader.ReadBoolean();

            ZR = reader.ReadBoolean();

            TriggerL = reader.ReadBoolean();

            TriggerR = reader.ReadBoolean();

            return this;

        }
    }
    
    /// <summary>
    /// Wiimote Operations
    /// </summary>
    [ServicePort()]
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class WiimoteOperations : PortSet<Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, Get, Subscribe, WiimoteChanged, SetLEDs, SetRumble>
    {
        
        /// <summary>
        /// Required Lookup request body type
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup()
        {
            Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Lookup and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup(Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// A request to drop the service.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop()
        {
            Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Drop and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop(Microsoft.Dss.ServiceModel.Dssp.DropRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Required Get body type
        /// </summary>
        public virtual PortSet<WiimoteState,Fault> Get()
        {
            Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            Get op = new Get(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Get and return the response port.
        /// </summary>
        public virtual PortSet<WiimoteState,Fault> Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body)
        {
            Get op = new Get();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Subscribe and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,Fault> Subscribe(IPort notificationPort)
        {
            Subscribe op = new Subscribe();
            op.Body = new Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            op.NotificationPort = notificationPort;
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Subscribe and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,Fault> Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, IPort notificationPort)
        {
            Subscribe op = new Subscribe();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            op.NotificationPort = notificationPort;
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Wiimote State
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> WiimoteChanged()
        {
            WiimoteState body = new WiimoteState();
            WiimoteChanged op = new WiimoteChanged(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Wiimote Changed and return the response port.
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> WiimoteChanged(WiimoteState body)
        {
            WiimoteChanged op = new WiimoteChanged();
            op.Body = body ?? new WiimoteState();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// LED State
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> SetLEDs()
        {
            LEDState body = new LEDState();
            SetLEDs op = new SetLEDs(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post SetLE Ds and return the response port.
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> SetLEDs(LEDState body)
        {
            SetLEDs op = new SetLEDs();
            op.Body = body;
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Rumble Request
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> SetRumble()
        {
            RumbleRequest body = new RumbleRequest();
            SetRumble op = new SetRumble(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Set Rumble and return the response port.
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> SetRumble(RumbleRequest body)
        {
            SetRumble op = new SetRumble();
            op.Body = body;
            this.Post(op);
            return op.ResponsePort;

        }
    }
    
    /// <summary>
    /// Get
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : Microsoft.Dss.ServiceModel.Dssp.Get<Microsoft.Dss.ServiceModel.Dssp.GetRequestType, PortSet<WiimoteState, Fault>>
    {
        
        /// <summary>
        /// Get
        /// </summary>
        public Get()
        {
        }
        
        /// <summary>
        /// Get
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Get
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, Microsoft.Ccr.Core.PortSet<WiimoteState,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Subscribe to Wiimote service notifications.
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    [DisplayName("Subscribe")]
    [Description("Subscribe to Wiimote service notifications.")]
    public class Subscribe : Microsoft.Dss.ServiceModel.Dssp.Subscribe<Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, Fault>>
    {
        
        /// <summary>
        /// Subscribe to Wiimote service notifications.
        /// </summary>
        public Subscribe()
        {
        }
        
        /// <summary>
        /// Subscribe to Wiimote service notifications.
        /// </summary>
        public Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Subscribe to Wiimote service notifications.
        /// </summary>
        public Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Wiimote Changed
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class WiimoteChanged : Microsoft.Dss.ServiceModel.Dssp.Update<WiimoteState, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>>
    {
        
        /// <summary>
        /// Wiimote Changed
        /// </summary>
        public WiimoteChanged()
        {
        }
        
        /// <summary>
        /// Wiimote Changed
        /// </summary>
        public WiimoteChanged(WiimoteState body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Wiimote Changed
        /// </summary>
        public WiimoteChanged(WiimoteState body, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Set Wiimote Leds
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    [DisplayName("Set Wiimote Leds")]
    public class SetLEDs : Microsoft.Dss.ServiceModel.Dssp.Update<LEDState, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>>
    {
        
        /// <summary>
        /// Set Wiimote Leds
        /// </summary>
        public SetLEDs()
        {
        }
        
        /// <summary>
        /// Set Wiimote Leds
        /// </summary>
        public SetLEDs(LEDState body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Set Wiimote Leds
        /// </summary>
        public SetLEDs(LEDState body, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Set Wiimote Rumble
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    [DisplayName("Set Wiimote Rumble")]
    public class SetRumble : Microsoft.Dss.ServiceModel.Dssp.Update<RumbleRequest, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>>
    {
        
        /// <summary>
        /// Set Wiimote Rumble
        /// </summary>
        public SetRumble()
        {
        }
        
        /// <summary>
        /// Set Wiimote Rumble
        /// </summary>
        public SetRumble(RumbleRequest body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Set Wiimote Rumble
        /// </summary>
        public SetRumble(RumbleRequest body, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort)
        {
        }
    }
}
